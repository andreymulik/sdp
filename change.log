version 0.2:
  FIXED:
    * assoc and assoc'
    * copied' implementation for Array and Bytes and related segfault in timSort
    * test suite for Sort: the probability that a structure longer than 64
      elements will be generated during the test is too small and insertionSort
      is tested instead of timSort
    * Some Ord instances, now guaranteed lexicographical order
    * tails and inits: now returns [Z] if structure is empty
    * Freeze instances for Array, Ublist and ByteList
    * prevTest and nextTest memory leak
    * a lot of stupid bugs
  
  DEPRECATED:
    * Bounds type, in favour tuple type synonyms
  
  ADDED:
    * SDP.Comparing: common comparators, exported by SDP.SafePrelude
    * SDP.Finite: common n-dimensional index, exported by SDP.Index
    * SDP.Tuple: tiple synonyms, exported by SDP.Index
    * SDP.Map: Map, class of dictionaries
    
    * SDP.Internal.SArray: SArray# and STArray# pseudo-primitives
    * SDP.Internal.SBytes module: SBytes# and STBytes# pseudo-primitives
    
    * SDP.SortM.Insertion: InsertionSort for mutable structures
    * SDP.SortM.Tim: TimSort for mutable structures
    
    * Test.SDP.Gen: Short, Medium and Long newtypes for Arbitrary
    * Test.SDP: short import of basic test suite
    
    * SDP.Index functions: toGBounds, fromGBounds, offsetIntegral, checkBounds
      and defaultBoundsUnsign
    * SDP.Unboxed functions: cloneUnboxed#, copyUnboxed# and copyUnboxedM#
    * SDP.Estimate: left-side Estimate comparators
    * SDP.SafePrelude combinators: (?+), (?-) and (...)
    
    * SDP.Linear:   sorted and ascending functions
    * SDP.Indexed:  binaryContain function
    * SDP.LinearM:  sortedM function
    * SDP.IndexedM: swapM function
    
    * OverloadedIndices syntactic sugar
    
    * Index type families: GIndex, DimInit and DimLast
    
    * Index class functions: defLimit, defaultBounds, toGIndex and fromGIndex
    
    * Bordered functions: offsetOf and indexIn
    
    * Linear class functions: except, select, extract, selects,
      select', extract', selects'
    
    * Split class functions:
      keep, sans, divide, divides, save, skip, chunks, each,
      
      selectWhile,  extractWhile,  selectEnd,  extractEnd,
      selectWhile', extractWhile', selectEnd', extractEnd'
    
    * Set class function: groupSetWith
    
    * Indexed class functions: assocMap, assocMap' and update
    * Unboxed class functions: bsizeof#, sizeof#, psizeof
    
    * Freeze class function: unsafeFreeze
    * Thaw   class function: unsafeThaw
    
    * Test suite for Eq, Ord and Estimate
    
    * Control.Exception.SDP exception: UnexpectedRank for OverloadedIndices
    
    * bench-sort benchmark: TimSort for immutable structures (also see
    sdp-ioarrays benchmark for mutable TimSort)
    
    * Tests: test-array, test-bytelist, test-bytes, test-ndices, test-ublist,
    test-unlist, test-unrolled
  
  CHANGED:
    * Estimate class: removed superclasses Ord1 and Foldable, type variable now
    has kind * (instead * -> *)
    
    * Scan class: new superclass Linear (instead Foldable), signature changes
    
    * unsafeIndex definition for unsigned numeric types
    
    * indexOf renamed, see indexIn
    
    * (/>): removed second argument, now updates all elements in structure, see
    update function
    
    * Read and Show instances for (:&), now list-like and require IsList
  
  REMOVED:
    * SDP.Index: IndexEQ class, unsafeBounds and toBounds helpers
    
    * SDP.Estimate: EL type
    
    * SDP.SortM.Stuff: moved to SDP.SortM.Tim
    
    * SDP.Tree.BinTree: see sdp-tree
  
  IMPROVED:
    * Structures implementation: now the actual size and the offset of the
    arrays are encapsulated in pseudo-primitive types
    
    * sortTest suite rewrited for Medium-sized structures generator, see fixes

--------------------------------------------------------------------------------

version 0.1.1:
  ADDED:
    * imap and accum functions (Indexed)
    * reshape and fromAccum procedures (IndexedM)
    * IFold and IFoldM classes

version 0.1:
  DEPRECATED:
    * SDP.Tree.BinTree
      1) BinTree is memory inefficient
      2) BinTree is very slow
      3) The idea of using AVL turned out to be worse than I thought. I see no
      reason to optimize the existing implementation or change the algorithm to
      a faster one. The result will be noticeably worse than the implementation
      on arrays
      4) Effective tools appeared in the library for working with mutable data
      5) TimSort showed a good enough result so that heapSort implementation
      isn't required
  
  ADDED:
    * Set   instances for Array, Bytes, Unlist, Ublist, Unrolled and ByteList
    * Sort  instances for Unrolled, ByteList, Unlist, Ublist and BinTree
    * SortM instances for STUnrolled, STByteList, STUnlist and STUblist
    
    * (!^) and fromIndexed functions (Indexed)
    * (!#>), write_ fromIndexed' and fromIndexedM procedures (SDP.IndexedM)
    
    * Test.SDP.Sort module (very short)
    * Thaw and Freeze classes
  
  MOVED:
    * arrcopy procedure (internal for SDP.SortM.Stuff)
    * write function (Indexed class)
    * Some internal common comparators (SDP.Estimate)

--------------------------------------------------------------------------------

version 0.0.2:
  FIXED:
    * old bug in SDP.Index.inBounds ("wrong" Ord for default declaration)
  
  ADDED:
    * STArray, STBytes, STUnrolled, STByteList, STUnlist and STUblist
    * BorderedM, LinearM, IndexedM and SortM classes
    
    * Service class IndexEQ for trivial index declarations
    * Index instances for 2- ... 15-dimensional indices
    * Index instances for 2- .. 15-dimensional tuples

version 0.0.1.2:
  ADDED:
    * IsString instances
    * IsList   instances

version 0.0.1.1:
  ADDED:
    * Set instance for BinTree
    * Semigroup and Monoid instances

version 0.0.1.0:
  FIXED:
    * Some bugs
  
  ADDED:
    * UnreachableException type

version 0.0.0.11:
  ADDED:
    * Binary trees

version 0.0.0.10:
  ADDED:
    * ByteList (Unrolled + UArray)
    * Functions parts, partitions, stripPrefix and stripSuffix

version 0.0.0.9:
  ADDED:
    * Bytes (UArray analogue)
  
  IMPROVED:
    * Test suite rewrited and documented
    * List instance: implemented lost fucntions (prefix, suffix) for list
    * Changed Unboxed class (removed fillByteArray# and changed newUnboxed
    implementation)

version 0.0.0.8:
  ADDED:
    * Service class Unboxed for ByteArray

version 0.0.0.7:
  ADDED:
    * [internal] STUArray (rewrited Data.Array.Base type)
  
  IMPROVED:
    * Linear and LineS now completely (formally) independent of Foldable

version 0.0.0.6:
  ADDED:
    * New dependency: ghc-prim >= 0.5.3 (to use ~~ class)
    * Sort class.

version 0.0.0.5:
  FIXED:
    * unsafeIndex for unsigned types - (toEnum (-1)) fail. Structures with
    unsigned indices now indexed from (toEnum 1)
  
  ADDED:
    * Haddock documentation.

version 0.0.0.4:
  ADDED:
    * LineS and Split classes
    * Tuple instances for Index
    * Unrolled linked list type
  
  IMPROVED:
    * Linear class extended

version 0.0.0.3:
  FIXED:
    * Many stupid bugs
  
  ADDED:
    * Ð¡ommon tests for standard classes were added

version 0.0.0.2:
  ADDED:
    Array type (rewrited GHC.Arr)

version 0.0.0.1:
  ADDED:
    * Indexed class
    * Linear class
    * Set class
    
    * Estimate class
    * Index class
    * Scan class
    * Zip class
    
    * IndexException type

